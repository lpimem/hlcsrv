// Code generated by protoc-gen-go.
// source: page_note.proto
// DO NOT EDIT!

package hlcmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Pagenote struct {
	Pageid     uint32       `protobuf:"varint,1,opt,name=pageid" json:"pageid,omitempty"`
	Uid        uint32       `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Highlights []*RangeMeta `protobuf:"bytes,3,rep,name=highlights" json:"highlights,omitempty"`
	Url        string       `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *Pagenote) Reset()                    { *m = Pagenote{} }
func (m *Pagenote) String() string            { return proto.CompactTextString(m) }
func (*Pagenote) ProtoMessage()               {}
func (*Pagenote) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Pagenote) GetPageid() uint32 {
	if m != nil {
		return m.Pageid
	}
	return 0
}

func (m *Pagenote) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Pagenote) GetHighlights() []*RangeMeta {
	if m != nil {
		return m.Highlights
	}
	return nil
}

func (m *Pagenote) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Pagenote)(nil), "hlcmsg.Pagenote")
}

func init() { proto.RegisterFile("page_note.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0x4c, 0x4f,
	0x8d, 0xcf, 0xcb, 0x2f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcb, 0xc8, 0x49,
	0xce, 0x2d, 0x4e, 0x97, 0x12, 0x28, 0x4a, 0xcc, 0x4b, 0x4f, 0x8d, 0xcf, 0x4d, 0x2d, 0x49, 0x84,
	0xc8, 0x28, 0x55, 0x72, 0x71, 0x04, 0x24, 0xa6, 0xa7, 0x82, 0xd4, 0x0a, 0x89, 0x71, 0xb1, 0x81,
	0x34, 0x66, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0x41, 0x79, 0x42, 0x02, 0x5c, 0xcc,
	0xa5, 0x99, 0x29, 0x12, 0x4c, 0x60, 0x41, 0x10, 0x53, 0xc8, 0x90, 0x8b, 0x2b, 0x23, 0x33, 0x3d,
	0x23, 0x27, 0x33, 0x3d, 0xa3, 0xa4, 0x58, 0x82, 0x59, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x50, 0x0f,
	0x62, 0x89, 0x5e, 0x10, 0xc8, 0x0e, 0xdf, 0xd4, 0x92, 0xc4, 0x20, 0x24, 0x45, 0x60, 0x43, 0x8a,
	0x72, 0x24, 0x58, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0xcc, 0x24, 0x36, 0xb0, 0x0b, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xe4, 0xf2, 0x7b, 0xae, 0x00, 0x00, 0x00,
}
