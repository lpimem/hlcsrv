// Code generated by protoc-gen-go.
// source: range_meta.proto
// DO NOT EDIT!

package hlcmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RangeMeta struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Anchor      string `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Start       string `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	StartOffset uint32 `protobuf:"varint,4,opt,name=startOffset" json:"startOffset,omitempty"`
	End         string `protobuf:"bytes,5,opt,name=end" json:"end,omitempty"`
	EndOffset   uint32 `protobuf:"varint,6,opt,name=endOffset" json:"endOffset,omitempty"`
	Text        string `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
}

func (m *RangeMeta) Reset()                    { *m = RangeMeta{} }
func (m *RangeMeta) String() string            { return proto.CompactTextString(m) }
func (*RangeMeta) ProtoMessage()               {}
func (*RangeMeta) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RangeMeta) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RangeMeta) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *RangeMeta) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *RangeMeta) GetStartOffset() uint32 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *RangeMeta) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *RangeMeta) GetEndOffset() uint32 {
	if m != nil {
		return m.EndOffset
	}
	return 0
}

func (m *RangeMeta) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*RangeMeta)(nil), "hlcmsg.RangeMeta")
}

func init() { proto.RegisterFile("range_meta.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0x4d, 0x0a, 0xc2, 0x30,
	0x10, 0x46, 0x49, 0x7f, 0x22, 0x1d, 0x51, 0xca, 0x20, 0x92, 0x85, 0x8b, 0xe2, 0xaa, 0x2b, 0x37,
	0x9e, 0x43, 0x84, 0x5e, 0x40, 0x62, 0x33, 0xfd, 0x01, 0x9b, 0x4a, 0x3a, 0x0b, 0x6f, 0xe5, 0x15,
	0xa5, 0x63, 0x41, 0x77, 0xef, 0x7b, 0xe1, 0x05, 0x06, 0xf2, 0x60, 0x7d, 0x4b, 0xb7, 0x81, 0xd8,
	0x9e, 0x9e, 0x61, 0xe4, 0x11, 0x75, 0xf7, 0xa8, 0x87, 0xa9, 0x3d, 0xbe, 0x15, 0x64, 0xd5, 0xfc,
	0x78, 0x21, 0xb6, 0xb8, 0x85, 0xa8, 0x77, 0x46, 0x15, 0xaa, 0xdc, 0x54, 0x51, 0xef, 0x70, 0x0f,
	0xda, 0xfa, 0xba, 0x1b, 0x83, 0x89, 0x0a, 0x55, 0x66, 0xd5, 0xb2, 0x70, 0x07, 0xe9, 0xc4, 0x36,
	0xb0, 0x89, 0x45, 0x7f, 0x07, 0x16, 0xb0, 0x16, 0xb8, 0x36, 0xcd, 0x44, 0x6c, 0x12, 0xf9, 0xe6,
	0x5f, 0x61, 0x0e, 0x31, 0x79, 0x67, 0x52, 0xa9, 0x66, 0xc4, 0x03, 0x64, 0xe4, 0xdd, 0x52, 0x68,
	0x29, 0x7e, 0x02, 0x11, 0x12, 0xa6, 0x17, 0x9b, 0x95, 0x04, 0xc2, 0x77, 0x2d, 0x07, 0x9c, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0xe8, 0x09, 0xc7, 0xd4, 0x00, 0x00, 0x00,
}
